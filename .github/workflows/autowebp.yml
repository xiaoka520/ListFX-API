name: Generate WebP Photos List with CDN Mirror

on:
  schedule:
    - cron: '0 0 * * *'  # 每天UTC 0点执行（北京时间8点）
  push:
    paths:
      - 'img/**'          # 当img目录有变更时触发
  workflow_dispatch:      # 允许手动触发

jobs:
  generate-list:
    runs-on: ubuntu-latest
    # 添加必要的权限声明
    permissions:
      contents: write   # 必须要有写入权限才能推送
      issues: write     # 为了能够创建issue
      pull-requests: write  # 为了能够创建PR（可选）
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录
          token: ${{ secrets.GITHUB_TOKEN }}  # 使用具有写入权限的token
          # 设置正确的用户信息
          user-name: 'GitHub Actions'
          user-email: 'actions@github.com'

      - name: Setup environment
        run: |
          # 设置时区为北京时间
          sudo timedatectl set-timezone Asia/Shanghai
          # 安装必要的工具
          sudo apt-get update
          sudo apt-get install -y tree jq curl
          # 显示当前用户和权限
          whoami
          groups
          ls -la

      - name: Generate CDN links for WebP
        id: generate-links
        run: |
          # 创建临时目录
          mkdir -p tmp
          
          echo "开始处理 WebP 图片..."
          
          # 1. 查找所有webp图片（包括子目录）
          find img/ -type f -iname "*.webp" > tmp/all_webp.txt
          
          # 记录找到的文件数量
          FILE_COUNT=$(wc -l < tmp/all_webp.txt)
          echo "找到 $FILE_COUNT 个 WebP 文件"
          
          # 2. 生成带国内CDN镜像的链接
          echo "生成 CDN 链接..."
          cat tmp/all_webp.txt | while read -r file; do
            # 移除前面的img/路径
            relative_path="${file#img/}"
            
            # 生成国内镜像加速链接
            echo "https://cdn.mengze.vip/gh/${{ github.repository }}/${{ github.sha }}/img/$relative_path"
          done > photos.txt
          
          # 3. 添加统计信息
          LINK_COUNT=$(wc -l < photos.txt)
          echo "生成 $LINK_COUNT 个有效链接"
          
          # 4. 验证生成的链接
          echo "验证前5个链接..."
          head -5 photos.txt | while read url; do
            if curl --output /dev/null --silent --head --fail --max-time 5 "$url"; then
              echo "✅ $url 验证通过"
            else
              echo "❌ $url 验证失败"
            fi
          done
          
          # 保存统计信息供后续步骤使用
          echo "FILE_COUNT=$FILE_COUNT" >> $GITHUB_ENV
          echo "LINK_COUNT=$LINK_COUNT" >> $GITHUB_ENV
          
          # 显示目录结构 (用于调试)
          echo "生成后的目录结构:"
          tree -L 2

      - name: Create README info
        run: |
          # 创建简单的README信息
          echo "# 图片链接列表" > info.md
          echo "最后更新: $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')" >> info.md
          echo "图片数量: ${{ env.FILE_COUNT }}" >> info.md
          echo "有效链接: ${{ env.LINK_COUNT }}" >> info.md
          echo "" >> info.md
          echo "## 示例链接" >> info.md
          head -3 photos.txt | while read url; do
            echo "- [$url]($url)" >> info.md
          done
          
          # 添加CDN状态信息
          echo "" >> info.md
          echo "## CDN状态" >> info.md
          echo "- 主镜像: cdn.mengze.vip" >> info.md
          echo "- 最后验证时间: $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')" >> info.md

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Auto: 更新图片列表 (${{ env.LINK_COUNT }} 个链接)"
          file_pattern: |
            photos.txt
            info.md
          commit_user_name: 'GitHub Actions Bot'
          commit_user_email: 'actions@github.com'
          commit_author: 'GitHub Actions <actions@github.com>'
          # 强制添加所有更改的文件
          add: '--all'
          # 显式使用token
          token: ${{ secrets.GITHUB_TOKEN }}
          # 在调试模式下运行
          debug: true

      - name: Upload photos.txt as artifact
        uses: actions/upload-artifact@v4
        with:
          name: photos-list-${{ github.run_id }}
          path: |
            photos.txt
            info.md
          retention-days: 7

      - name: Create success report
        if: ${{ success() }}
        run: |
          echo "工作流成功完成！"
          echo "生成了 ${{ env.LINK_COUNT }} 个图片链接"
          echo "查看生成的文件: https://github.com/${{ github.repository }}/blob/main/photos.txt"

      - name: Notify on failure
        if: ${{ failure() }}
        uses: actions/github-script@v6
        with:
          script: |
            try {
              // 获取最后一次提交信息
              const commitResponse = await github.rest.repos.getCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.sha
              });
              
              const commitMessage = commitResponse.data.commit.message;
              const committer = commitResponse.data.commit.author ? 
                commitResponse.data.commit.author.name : 'Unknown';
              
              // 创建新的 Issue
              const issueResponse = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '⚠️ 图片列表生成失败',
                body: `### 工作流运行失败\n
                       **工作流名称**: ${context.workflow}\n
                       **运行ID**: [${context.runId}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n
                       **触发事件**: ${context.eventName}\n
                       **提交信息**: ${commitMessage}\n
                       **提交者**: ${committer}\n
                       **提交SHA**: ${context.sha}\n\n
                       **错误详情**: 请查看工作流运行日志获取详细信息`
              });
              
              console.log(`已创建问题 #${issueResponse.data.number} 来报告失败`);
              
            } catch (createError) {
              console.error('创建问题失败:', createError);
              
              // 备选方案：发送到 Slack 或其他服务
              console.log('尝试备选通知方案...');
              // 这里可以添加其他通知逻辑
            }

      - name: Final status report
        run: |
          echo "工作流状态: ${{ job.status }}"
          echo "运行时间: ${{ job.steps.*.conclusion }}"
          echo "详细日志: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
